using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MalwareController : MonoBehaviour
{
    public static MalwareSave malwareSave;

    public ComputerManager computerManager;

    public string[] virus_QuestDetail;

    public string[] adware_QuestDetail;

    public string[] trojan_QuestDetail;

    public string[] ransom_QuestDetail;

    public string TriggerNPC(int index)
    {
        Target NPC = (Target) index;

        int malwareIndex;
        string questDetail;
        MalwareObject malware;
        (malwareIndex, malware) = MalwareManager.GetRandomMalware();
        malwareSave =
            new MalwareSave {
                dayLeft = 4,
                questTarget = NPC,
                malwareName = malware.name,
                malwareType = malware.detail,
                dictIndex = malwareIndex
            };
        computerManager.AddMalwareToCom (NPC, malwareIndex);
        switch (malware.detail)
        {
            case MalwareType.Virus:
                SetVirus (NPC);
                questDetail =
                    virus_QuestDetail[Random
                        .Range(0, virus_QuestDetail.Length)];
                break;
            case MalwareType.Adware:
                SetAdware (NPC);
                questDetail =
                    adware_QuestDetail[Random
                        .Range(0, adware_QuestDetail.Length)];
                break;
            case MalwareType.Trojan:
                SetTrojan (NPC);
                questDetail =
                    trojan_QuestDetail[Random
                        .Range(0, virus_QuestDetail.Length)];
                break;
            default:
                questDetail = "";
                break;
        }

        NPCcontroller.TriggerNPCQuest(NPC, questDetail, Scenario.Malware);
        ComputerManager.NewActiveComAction += CheckComChange;
        return JsonUtility.ToJson(malwareSave);
    }

    public string TriggerRansom(int index)
    {
        Target target = (Target) index;
        string questDetail =
            ransom_QuestDetail[Random.Range(0, ransom_QuestDetail.Length)];
        if (target != Target.You)
            NPCcontroller.TriggerNPCQuest(target, questDetail, Scenario.Ransom);
        malwareSave =
            new MalwareSave {
                dayLeft = 4,
                questTarget = target,
                malwareName = "WannaDie",
                malwareType = MalwareType.Ransom
            };
        SetRansom (target);
        return JsonUtility.ToJson(malwareSave);
    }

    private void SetVirus(Target target)
    {
        computerManager.SystemOverload (target);
        computerManager.DiskOverload (target);
        computerManager.SetComputerBehavior(target, true, true);
    }

    private void SetTrojan(Target target)
    {
        computerManager.SystemOverload (target);
        computerManager.SetComputerBehavior(target, true, true);
    }

    private void SetAdware(Target target)
    {
        computerManager.SetComputerBehavior(target, false, false);
    }

    private void SetRansom(Target target)
    {
        computerManager.SetComputerLockDown(target, true);
    }

    public (bool, string) UpdateScenarioState()
    {
        malwareSave.dayLeft--;
        if (malwareSave.dayLeft <= 0)
        {
            ComputerManager.NewActiveComAction -= CheckComChange;
            return (false, JsonUtility.ToJson(malwareSave));
        }
        return (true, JsonUtility.ToJson(malwareSave));
    }

    public void SetMalwareScenarioState(string detail)
    {
        malwareSave = JsonUtility.FromJson<MalwareSave>(detail);
        string questDetail;
        int malwareIndex = malwareSave.dictIndex;
        Target NPC = malwareSave.questTarget;

        computerManager.AddMalwareToCom (NPC, malwareIndex);
        switch (malwareSave.malwareType)
        {
            case MalwareType.Virus:
                SetVirus (NPC);
                questDetail =
                    virus_QuestDetail[Random
                        .Range(0, virus_QuestDetail.Length)];
                break;
            case MalwareType.Adware:
                SetAdware (NPC);
                questDetail =
                    adware_QuestDetail[Random
                        .Range(0, adware_QuestDetail.Length)];
                break;
            case MalwareType.Trojan:
                SetTrojan (NPC);
                questDetail =
                    trojan_QuestDetail[Random
                        .Range(0, virus_QuestDetail.Length)];
                break;
            case MalwareType.Ransom:
                SetRansom (NPC);
                questDetail =
                    ransom_QuestDetail[Random
                        .Range(0, ransom_QuestDetail.Length)];
                break;
            default:
                questDetail = "";
                break;
        }

        NPCcontroller.TriggerNPCQuest(NPC, questDetail, Scenario.Malware);
        ComputerManager.NewActiveComAction += CheckComChange;
    }

    public void CheckComChange()
    {
        Computer computer =
            computerManager.GetComputer((int) malwareSave.questTarget);
        if (!computer.isInfected) InvokeScenarioSuccess();
    }

    public void CheckReport(MalwareType answer)
    {
        if (answer == malwareSave.malwareType)
            InvokeScenarioSuccess();
        else
            InvokeScenarioFailure();
    }

    public void InvokeScenarioFailure()
    {
        ComputerManager.NewActiveComAction -= CheckComChange;
        computerManager.PurgeMalwareOnCom(malwareSave.questTarget);
        ScenarioManager.InvokeScenarioFailed(JsonUtility.ToJson(malwareSave));
    }

    public void InvokeScenarioSuccess()
    {
        ComputerManager.NewActiveComAction -= CheckComChange;
        computerManager.PurgeMalwareOnCom(malwareSave.questTarget);
        ScenarioManager.InvokeScenarioSuccess(JsonUtility.ToJson(malwareSave));
    }

    public void InvokeRansomFailure(bool payRansom)
    {
        //Reuse dictIndex for reputation control
        if (payRansom)
            malwareSave.dictIndex = 1;
        else
            malwareSave.dictIndex = 0;
        ComputerManager.NewActiveComAction -= CheckComChange;
        computerManager.PurgeMalwareOnCom(malwareSave.questTarget);
        ScenarioManager.InvokeScenarioFailed(JsonUtility.ToJson(malwareSave));
    }
}

public class MalwareSave
{
    public int dayLeft;

    public Target questTarget;

    public string malwareName;

    public MalwareType malwareType;

    public int dictIndex;
}
