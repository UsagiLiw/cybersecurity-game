using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class MalwareReport : MonoBehaviour
{
    public MalwareController malwareController;

    public Dropdown suggest_dropDown;

    public GameObject reportPage;

    private bool toggleButton = false;

    public MalwareReportClass[] optionA;

    public MalwareReportClass[] optionB;

    public MalwareReportClass[] optionC;

    private int valueA;

    private int valueB;

    private int valueC;

    private int virusCount;

    private int trojanCount;

    private int adwareCount;

    private void OnEnable()
    {
        valueA = 0;
        valueB = 0;
        valueC = 0;

        toggleButton = false;
        reportPage.SetActive(false);
        ScenarioManager.ScenarioEnded += CloseReport;
    }

    private void OnDisable()
    {
        ScenarioManager.ScenarioEnded -= CloseReport;
    }

    public void ToggleReportPage()
    {
        if (toggleButton)
        {
            reportPage.SetActive(false);
            toggleButton = false;
        }
        else
        {
            reportPage.SetActive(true);
            this.gameObject.transform.SetAsLastSibling();
            toggleButton = true;
        }
    }

    public void HandleInputData_A(int value)
    {
        valueA = value;
        UpdateValueChange();
    }

    public void HandleInputData_B(int value)
    {
        valueB = value;
        UpdateValueChange();
    }

    public void HandleInputData_C(int value)
    {
        valueC = value;
        UpdateValueChange();
    }

    private void UpdateValueChange()
    {
        int i = 0;
        List<MalwareType> iSuggest = new List<MalwareType>();
        List<MalwareReportClass> iSymptom = new List<MalwareReportClass>();
        if (valueA != 0)
        {
            iSymptom.Add(optionA[valueA]);
            i++;
        }
        if (valueB != 0)
        {
            iSymptom.Add(optionB[valueB]);
            i++;
        }
        if (valueC != 0)
        {
            iSymptom.Add(optionC[valueC]);
            i++;
        }
        if (i < 2) return;

        virusCount = 0;
        trojanCount = 0;
        adwareCount = 0;
        foreach (MalwareReportClass item in iSymptom)
        {
            switch (item.type1)
            {
                case MalwareType.Virus:
                    virusCount++;
                    break;
                case MalwareType.Trojan:
                    trojanCount++;
                    break;
                case MalwareType.Adware:
                    adwareCount++;
                    break;
                default:
                    break;
            }
            switch (item.type2)
            {
                case MalwareType.Virus:
                    virusCount++;
                    break;
                case MalwareType.Trojan:
                    trojanCount++;
                    break;
                case MalwareType.Adware:
                    adwareCount++;
                    break;
                default:
                    break;
            }
        }
        ChangeSuggestion();
    }

    private void ChangeSuggestion()
    {
        int[] arr = { virusCount, trojanCount, adwareCount };
        int highest = -1;
        List<MalwareType> iSuggest = new List<MalwareType>();
        for (int i = 0; i < arr.Length; i++)
        {
            if (arr[i] > highest)
            {
                highest = i;
            }
        }
        iSuggest.Add((MalwareType) highest);
        for (int j = 0; j < arr.Length; j++)
        {
            if (j == highest) continue;
            if (arr[j] == highest) iSuggest.Add((MalwareType) j);
        }

        //repopulate suggest option
        suggest_dropDown.options.Clear();
        foreach (MalwareType item in iSuggest)
        {
            string str = item.ToString();
            suggest_dropDown
                .options
                .Add(new Dropdown.OptionData() { text = str });
        }
    }

    public void SubmitMalwareReport()
    {
        string answer = suggest_dropDown.options[suggest_dropDown.value].text;
        if (string.IsNullOrEmpty(answer)) return;
        MalwareType enumAnswer =
            (MalwareType) System.Enum.Parse(typeof (MalwareType), answer);

        malwareController.CheckReport (enumAnswer);
        this.gameObject.SetActive(false);
        // switch (enumAnswer)
        // {
        //     case MalwareType.Virus:
        //         Debug.Log("is virus");
        //         break;
        //     case MalwareType.Trojan:
        //         Debug.Log("is trojan");
        //         break;
        //     case MalwareType.Adware:
        //         Debug.Log("is adware");
        //         break;
        //     default:
        //         Debug.Log("eat shit");
        //         break;
        // }
    }

    private void CloseReport()
    {
        this.gameObject.SetActive(false);
    }

    IEnumerator WaitASeconds(float time)
    {
        yield return new WaitForSeconds(time);
    }
}

[System.Serializable]
public class MalwareReportClass
{
    public MalwareType type1;

    public MalwareType type2;
}
